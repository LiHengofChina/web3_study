



//======================================================================= 签名生成是否需要密钥？
//======================================================================= 签名生成是否需要密钥？
 
可以将生成数字签名的过程拆解为两个部分，分别是生成哈希值和对哈希值进行加密。
在保护数据完整性的场景中，生成签名的具体过程如下：

（1）生成哈希值（不需要密钥）：
	首先，对原始数据进行哈希运算，生成一个固定长度的哈希值（摘要）。
	这个过程不需要任何密钥，任何人都可以根据相同的数据计算出相同的哈希值。
	目的：通过哈希值，能快速验证数据的完整性。如果数据发生任何变化，哈希值都会完全不同。
（2）对哈希值加密（需要密钥）：
	为了生成签名，需要使用发送者的私钥对哈希值进行加密。这个加密操作生成的值就是数字签名。
	私钥的使用确保了只有签名者（即持有私钥的人）才能生成该签名，这也是数字签名能提供身份验证的重要机制。
	接收者使用发送者的公钥来解密签名，从而获得发送者加密的哈希值。


//============================= 数字签名的生成过程：
//============================= 数字签名的生成过程：

（1）第一步：对原始数据进行哈希运算，生成一个固定长度的哈希值（摘要）。
（2）第二步：使用发送者的私钥对这个哈希值进行加密，生成签名。
（3）第三步：将原始数据和生成的签名一起发送给接收方。

//======================================================================= 举例说明：
//======================================================================= 举例说明：


//=========== 假设你要生成一个签名：
//=========== 假设你要生成一个签名：

（1）生成哈希值：对数据 D 进行哈希运算，得到 H(D)。这个步骤不需要密钥。
（2）加密哈希值：使用私钥 SK 对 H(D) 进行加密，生成签名 S = Encrypt(H(D), SK)。这个步骤需要私钥。

//=========== 签名验证过程：
//=========== 签名验证过程：

（1）接收者使用发送者的公钥解密签名，得到 H(D)。
（2）然后对收到的原始数据进行哈希运算，得到 H(D')。
（3）对比解密得到的 H(D) 和重新计算的 H(D')，如果相同，说明数据未被篡改，且签名来自持有私钥的发送者。


