
"非对称" 算法 在 "加密" 与 "签名" 中如何发挥作用

//=================================================================================================== 进一步说明：
//=================================================================================================== 进一步说明：

//======= 加密与解密（用于数据保密）//以非对称为例
//======= 加密与解密（用于数据保密）//以非对称为例

（1）加密：在非对称加密中，使用公钥 "加密数据"，只有拥有对应私钥的人才能解密并还原原始数据。
（2）解密：解密是加密的逆操作，用私钥解密数据，恢复原文。


//======= 签名与验证（用于数据真实性和完整性）：
//======= 签名与验证（用于数据真实性和完整性）：

（1）签名：发送者用私钥对 "数据的哈希值" 进行加密——>生成签名。
（2）验证：验证签名时，接收者用发送者的公钥对签名进行解密——>得到发送者生成的哈希值。//这个步骤虽然也叫“解密”，但其目的是为了比对哈希值，而不是还原原始数据。

//======= 最后
//======= 最后
对比两者签名值，验证数据完整性

//=================================================================================================== 加解密 与 签名中的加解密
//=================================================================================================== 加解密 与 签名中的加解密
//=================================================================================================== 加解密 与 签名中的加解密

//=======（1）加解密：是直接对原始数据进行操作。
//=======（1）加解密：是直接对原始数据进行操作。

加密：将原始数据转换为密文。
解密：将密文还原为原始数据。

//=======（2）签名中的加解密：是对签名值（也就是数据的哈希值的加密结果）进行操作。
//=======（2）签名中的加解密：是对签名值（也就是数据的哈希值的加密结果）进行操作。
签名：私钥对哈希值进行加密，生成签名。
验证：公钥对签名进行解密，得到哈希值，然后与原始数据的哈希值进行对比。


