
"加密、签名、消息认证码" 并不是同一个意思，它们是 "两种不同的技术"，虽然 "都与数据安全" 相关。

//===================================================================================================
//===================================================================================================

//==================================================（1）加密（Encryption）：“加密——解密”
//==================================================（1）加密（Encryption）：“加密——解密”

"加密"的目的是确保数据的保密性。它通过将 "明文转换为密文"，使得 "未经授权的人" 无法读取数据。
主要目标是 "保护数据免于被窃听"。


//==================================================（2）签名（Signature）：“签名——验证”（非对称）
//==================================================（2）签名（Signature）：“签名——验证”（非对称）

"数字签名" 的目的是 "验证数据的真实性和完整性"。
它通过对数据的 "哈希值（摘要）" 进行加密，
确保 "接收者" 能够验证数据是否来自特定的发送者，并且在传输过程中 "没有被篡改"。

//======= 首先得到签名
//======= 首先得到签名

使用 MD5 处理（或其他哈希算法如 SHA-256）是将用户输入的密码通过哈希算法转换为一串固定长度的哈希值（也叫摘要）。
这个哈希值是不可逆的，也就是说，不能通过哈希值还原出原始密码。

//======= 然后对 "签名" 加密
//======= 然后对 "签名" 加密

对 "数字签名" 使用 "非对称加密"，
通常发送者使用私钥对 "签名数据" 进行 "加密" ，接收者使用发送者的公钥进行 "解密" 得到 "签名数据" ，

然后验证：己对 "收到的原始数据" 再做一次哈希 → 得到摘要。进行比对


//==================================================（3）消息认证码（MAC）：完整性验证 + 对称密钥认证
//==================================================（3）消息认证码（MAC）：完整性验证 + 对称密钥认证

"消息认证码" 的目的是 "验证数据在传输过程中是否被篡改"，并确认消息确实来自拥有密钥的一方。
它通过对  "数据" 和 "一个共享的密钥" 共同进行哈希计算，生成一段认证码（MAC值），

"接收者" 用 "相同的密钥" 对收到的数据 "再计算一次 MAC"，进行比对。

与数字签名不同的是，"消息认证码使用的是对称密钥"，发送方和接收方都必须拥有 "同一个密钥" ，不能公开。

常见形式为：HMAC（Hash-based Message Authentication Code），比如 HMAC-SHA256。

//======= 首先生成 MAC 值
//======= 首先生成 MAC 值

发送方使用密钥 + 原始消息，通过 HMAC（如 HMAC-SHA256）计算出一个认证码（MAC 值）。

//======= 接收方验证 MAC
//======= 接收方验证 MAC

接收方使用相同的密钥 + 收到的原始消息，重新计算一次 MAC 值。
然后将新计算的 MAC 与收到的 MAC 进行比较：

- ✅ 一致 → 消息未被篡改，且来自可信方。
- ❌ 不一致 → 消息可能被篡改，或伪造。




