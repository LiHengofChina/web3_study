

//=================================================================================================================
//=================================================================================================================

HS256 和 HS512 是基于 HMAC (Hash-based Message Authentication Code) 的签名算法，
而不是单纯的散列算法。虽然它们内部确实使用了散列算法（如 SHA-256 和 SHA-512），
但它们的用途和工作原理与单纯的散列算法有所不同。让我们详细了解它们的区别。


（1）HMAC 与 散列算法的区别
	（1）散列算法 (Hash Algorithm):

		（1）散列算法是一种将任意长度的数据映射为固定长度的字符串的算法。
			 这种映射是单向的，即无法从散列值逆向计算出原始数据。

		（2）常见的散列算法包括 SHA-256、SHA-512、MD5 等。
			 它们主要用于数据完整性验证（如文件校验）和密码学应用（如密码哈希）。

		（2）散列算法本身没有认证功能，因此无法防止数据被篡改。

（2）HMAC (Hash-based Message Authentication Code):

		（1）HMAC 是一种基于散列函数的消息认证码（MAC），
			 用于验证消息的完整性和真实性。HMAC 结合了散列算法和密钥。

		（2）HMAC 的工作原理是将消息和一个密钥结合起来，
			 然后通过散列算法计算出一个认证码。这种认证码既能验证消息未被篡改（完整性），
			 也能确认消息来自可信任的一方（真实性）。

		（3）HMAC 通常用于需要验证消息或数据完整性和认证的场景，
			 如网络协议的安全通信、API 调用的签名等。


//================================================================================================================= HS256 和 HS512 的工作原理
//================================================================================================================= HS256 和 HS512 的工作原理
（1）HS256 使用 HMAC-SHA256 算法，即通过 HMAC 机制结合 SHA-256 散列算法来生成消息的认证码。
（2）HS512 使用 HMAC-SHA512 算法，即通过 HMAC 机制结合 SHA-512 散列算法来生成消息的认证码。


在 JWT 签名中，HS256 和 HS512 表示使用 HMAC-SHA256 和 HMAC-SHA512 来签名 JWT。这意味着：

消息认证码 (MAC) 生成: 使用用户定义的密钥（对称密钥）和消息内容（如 JWT 的头部和负载部分）生成一个认证码。
签名和验证: 生成的认证码附加到 JWT 中，当接收到 JWT 时，使用相同的密钥和算法来计算认证码并进行验证，以确保 JWT 的完整性和真实性。


