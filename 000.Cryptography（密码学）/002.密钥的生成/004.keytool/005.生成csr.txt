

//======================================================== （4）生成证书签名请求（CSR）：
//======================================================== （4）生成证书签名请求（CSR）：

用于申请  "正式证书" 时生成 CSR 文件：

keytool -certreq -alias mykey -file mycsr.csr -keystore mykeystore.jks

用于生成 CSR 文件（证书签名请求，Certificate Signing Request），它的目的是申请正式的 SSL 证书。
你可以将生成的 .csr 文件发送给证书颁发机构（CA），他们会根据这个请求生成并签发正式的证书。
		/**
		-certreq：生成证书签名请求（CSR）。
		-alias mykey：指定密钥对的别名，即要为其生成 CSR 的密钥对。
		-file mycsr.csr：生成的 CSR 文件的名称（保存为 mycsr.csr）。
		-keystore mykeystore.jks：密钥库文件，其中包含私钥和公钥（mykeystore.jks）。
		*/


//========================================================  自签名证书
//========================================================  自签名证书

你使用 keytool -exportcert 导出 .cer 文件时，这只是 "密钥库" 中的 "自签名证书"，
并未得到 "外部证书颁发机构（CA）的验证"。


//======================================================== .csr 文件（证书签名请求）
//======================================================== .csr 文件（证书签名请求）

（1）.csr 文件（Certificate Signing Request）是你向 "证书颁发机构（CA）" 请求 "正式证书的文件"。
	 它包含了你的 "公钥" 和 "相关信息（例如域名、组织名称等）"。
	  /**
		.csr 文件可以看作是一个证书申请表，它包含了你要申请证书的关键信息。
	  */

（2）证书颁发机构（CA）根据 "你的 .csr 文件"，验证你的身份，
	  并生成一个正式的 "签名证书（正式的 .cer 文件）"。
	  /**
			CA 会根据你提交的信息进行核实，以确保你确实拥有这个域名或组织。
			CA 可能要求你证明对该域名的所有权，通常通过邮件验证、DNS记录或网站文件验证等方式。
			提交的 .csr 文件中的信息必须和你申请证书时提供的信息保持一致，否则 CA 不会通过认证。
	  */


你可以使用  "正式签名的证书"  来替换  "你自己生成的 .cer" ，
这样 "其他人" 就可以 "信任你的证书（因为它得到了 CA 的签名）"。

