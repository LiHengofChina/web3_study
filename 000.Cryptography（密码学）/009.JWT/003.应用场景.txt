
//=================================================================== 应用场景
//=================================================================== 应用场景

//=========== JWT 使用 HMAC 进行消息认证码（MAC）：
//=========== JWT 使用 HMAC 进行消息认证码（MAC）：
	（1）当 JWT 使用 HMAC 作为签名算法时（如 HS256、HS512），它使用的是对称密钥。

	（2）这种方式下，发送者和接收者共享相同的密钥，
		 签名的计算方式是对 JWT 的头部和负载进行哈希计算，
		 并使用密钥生成消息认证码。

	（3）这类算法包括：
			HS256：HMAC + SHA-256
			HS384：HMAC + SHA-384
			HS512：HMAC + SHA-512
	（4）应用场景：
			如果 JWT 的生成方和验证方是同一方（如服务器生成并验证自己的 JWT），
			那么使用 HMAC 是常见且高效的选择。

//=========== JWT 使用 "非对称加密" 进行数字签名：
//=========== JWT 使用 "非对称加密" 进行数字签名：
	（1）当 JWT 使用 RSA 或 ECDSA 算法进行签名时（如 RS256、ES256），
		 它使用的是 "非对称密钥"。

	（2）这种方式下，发送者使用私钥对头部和负载进行加密生成签名，
		 接收者使用公钥来验证签名的有效性。

	（3）这类算法包括：
			RS256：RSA + SHA-256
			RS512：RSA + SHA-512
			ES256：ECDSA + SHA-256

	（4）应用场景：在分布式系统中，公钥可以公开用于验证 JWT 的签名，而私钥可以保密，
			仅用于签名。例如，单点登录（SSO）系统中常使用 RSA 签名，授权服务器使用私钥签发 JWT，
			客户端和其他服务使用公钥验证 JWT 的有效性。





