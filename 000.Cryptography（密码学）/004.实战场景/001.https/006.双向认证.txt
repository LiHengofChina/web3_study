

在一些高安全性场景下，服务器不仅需要加密通信，
还需要确保连接的客户端是受信任的（例如在金融服务、内部系统中）。

//=============================================================================================== 双向认证
//=============================================================================================== 双向认证


默认情况下，SSL/TLS 只是单向认证，即  "客户端" 验证 "服务器的证书"。

但通过启用 clientAuth， "服务器" 也可以验证 "客户端的证书"，从而确保 "双向认证"

即服务器和客户端相互验证对方的身份。


//=============================================================================================== 进一步说明：
//=============================================================================================== 进一步说明：

（1）
	前面是把 "服务器的证书（包括服务器的公钥）" 发送给 "客户端"，
	方便 "客户端" 传输 "自己的生成对称密钥"，最后实现 "加密通信"
	//"服务器——>客户端"提供 "证书" 来 "证明自己的身份"

（2） clientAuth="true" 时，
	是 "客户端" 提供 "客户端的证书（包括客户端的公钥）"
		//"客户端——>服务器"提供 "证书" 来 "证明自己的身份"。

（3）
	/**
		"客户端" 提供的证书也是 "由 CA 签名（CA私钥加密）" 的
		"服务器" 可以使用 "预埋的 CA 公钥来" 验证（解密）客户端的证书，确保该证书是由受信任的 CA 签发的，并且证书的内容没有被篡改。	 
		//所以 truststoreFile 里面是 "预埋的 CA 公钥" 证书库路径
	*/


（4）另外服务器验证客户端的身份 "但它并不生成新的对称密钥"


