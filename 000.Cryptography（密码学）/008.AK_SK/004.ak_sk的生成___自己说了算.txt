
AK/SK 的 "生成" 和 "验证规则" 通常由 "系统" 或 "平台开发商" 自行指定。
"开发商" 会设计 "一套规则" 来 管理 " AK/SK 的生成" 、"分发" 、以及 "验证机制"。

//================================================================ 具体来说：
//================================================================ 具体来说：

AK/SK 的生成由系统控制：

//=============================== 生成规则：
//=============================== 生成规则：

AK 和 SK 的生成规则一般是开发商自己制定的，通常会包含一些随机性或根据特定的算法生成唯一标识符。

Access Key (AK)：通常是公开的，用来标识用户或应用程序的身份。
Secret Key (SK)：是机密的，用来生成请求的签名，确保请求的完整性和真实性。


//=============================== 生成机制：
//=============================== 生成机制：
开发商可以通过以下几种方式生成 AK/SK：

随机生成一对唯一的 AK/SK（例如使用 UUID 或随机数生成算法）。
通过加密算法生成特定格式的密钥（如 Base64 编码）。


//=============================== 存储和管理：
//=============================== 存储和管理：

生成的 AK/SK 通常会由系统保存，特别是 SK，通常需要妥善保管以避免泄露。

//================================================================  AK/SK 验证机制由系统开发商定义：
//================================================================  AK/SK 验证机制由系统开发商定义：

//=============================== 验证规则：
//=============================== 验证规则：

请求发起时，开发商定义了一套规则来 "验证请求的合法性"。通常使用的机制是 "签名验证"

（1）请求中 "包含 AK" 以标识发起请求的 "用户或应用程序"。

（2）使用 SK 对请求进行签名，确保数据未被篡改。

（3）服务端会使用保存的 SK 来验证请求签名的正确性。


//=============================== 
验证通过/不通过：服务端根据验证结果决定是否接受请求。
如果签名不匹配，或者请求中没有包含有效的 AK/SK，服务端会拒绝请求。

