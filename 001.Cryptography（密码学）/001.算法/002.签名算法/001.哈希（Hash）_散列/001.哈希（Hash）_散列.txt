



"哈希（Hash）算法" 也被称为散列算法。
哈希算法的主要功能是将 "任意长度的数据" 映射到 "固定长度的输出（哈希值）"，这个过程被称为 "散列"。



//================================================================================================================= 散列算法
//================================================================================================================= 散列算法


//========== 用途：主要用于验证，防止信息被修。具体用途如：文件校验、数字签名、鉴权协议
//========== 用途：主要用于验证，防止信息被修。具体用途如：文件校验、数字签名、鉴权协议


（1）MD5：MD5是一种不可逆的加密算法，目前是最牢靠的加密算法之一，
		  它对应任何字符串都可以加密成一段唯一的固定长度的代码。

（2）SHA1：是由NISTNSA设计为同DSA一起使用的，
		（1）它对长度小于264的输入，产生长度为160bit的散列值，因此抗穷举 （brute-force） 性更好。
			 SHA-1 设计时基于和MD4相同原理,
		（3）并且模仿了该算法。SHA-1 是由美国标准技术局（NIST）颁布的国家标准，是一种应用最为广泛的Hash函数算法，
			 也是目前最先进的加密技术，被政府部门和私营业主用来处理敏感的信息。
			 而SHA-1基于MD5，MD5又基于MD4。

（3）HMAC：是密钥相关的哈希运算消息认证码（Hash-based Message Authentication Code）,
		    HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生成一个消息摘要作为输出。
		    也就是说HMAC是需要一个密钥的。所以，HMAC_SHA1也是需要一个密钥的，而SHA1不需要。


//================================================================================================================= MD5 SHA1 SHA256 SHA512 SHA1WithRSA 的区别
//================================================================================================================= MD5 SHA1 SHA256 SHA512 SHA1WithRSA 的区别

（1）MD5 SHA1 SHA256 SHA512 这4种本质都是摘要函数，不通在于长度

	 MD5     是 128 位，
	 SHA1    是 160 位 ，
	 SHA256  是 256 位，
	 SHA512  是512 位。


SHA1WithRSA  他的 核心算法是 先用sha1 去摘要，
然后使用 RSA  加密。
但是 他在 sha1  的过程中 加入了一些 关于算法的东西。





//================================================================================================================= 其他常用算法：
//================================================================================================================= 其他常用算法：

Base64：其实不是安全领域下的加密解密算法，只能算是一个编码算法，
通常用于把二进制数据编码为可写的字符形式的数据，对数据内容进行编码来适合传输(可以对img图像编码用于传输)。
这是一种可逆的编码方式。编码后的数据是一个字符串，其中包含的字符为：A-Z、a-z、0-9、+、/，
共64个字符(26 + 26 + 10 + 1 + 1 = 64，其实是65个字符，“=”是填充字符。
Base64要求把每三个8Bit的字节转换为四个6Bit的字节(3*8 = 4*6 = 24)，
然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1/3。
原文的字节最后不够3个的地方用0来补足，转换时Base64编码用=号来代替。这就是为什么有些Base64编码会以一个或两个等号结束的原因，中间是不可能出现等号的，但等号最多只有两个。其实不用"="也不耽误解码，之所以用"="，可能是考虑到多段编码后的Base64字符串拼起来也不会引起混淆。)
Base64编码是从二进制到字符的过程，像一些中文字符用不同的编码转为二进制时，产生的二进制是不一样的，所以最终产生的Base64字符也不一样。例如"上网"对应utf-8格式的Base64编码是"5LiK572R"， 对应GB2312格式的Base64编码是"yc/N+A=="。
标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的“/”和“+”字符变为形如“%XX”的形式，
而这些“%”号在存入数据库时还需要再进行转换，因为ANSI SQL中已将“%”号用作通配符。
为解决此问题，可采用一种用于URL的改进Base64编码，它不在末尾填充'='号，并将标准Base64中的“+”和“/”分别改成了“-”和“_”，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。
另有一种用于正则表达式的改进Base64变种，它将“+”和“/”改成了“!”和“-”，因为“+”，
“*”以及前面在IRCu中用到的“[”和“]”在正则表达式中都可能具有特殊含义。
此外还有一些变种，它们将“+/”改为“_-”或“._”（用作编程语言中的标识符名称）或“.-”（用于XML中的Nmtoken）甚至“_:”（用于XML中的Name）。

​HTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），
是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，
HTTPS的安全基础是SSL(SSL使用40 位关键字作为RC4流加密算法，这对于商业信息的加密是合适的。)，
因此加密的详细内容就需要SSL。https:URL表明它使用了HTTP，
但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间），
提供了身份验证与加密通讯方法，现在它被广泛用于万维网上安全敏感的通讯，
例如交易支付方面。它的主要作用可以分为两种：
		一种是建立一个信息安全通道，来保证数据传输的安全；
		另一种就是确认网站的真实性。

