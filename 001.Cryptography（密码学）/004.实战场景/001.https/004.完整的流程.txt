
//=============================================== 完整流程就是
//=============================================== 完整流程就是

（1）首先对 "服务器的公钥" 进行CA签名（"公钥哈希"+"CA私钥签名"），发送到浏览器

（2）浏览器使用 "预埋证书（CA公钥）" 验证 "CA签名"，得到 "服务的公钥"

（3）浏览器生成 "对称密钥" ，使用 "服务的公钥" 加密它，发送给 "服务器"
	 服务器 使用 "服务器的私钥" 解密 得到  "对称密钥"

（4）然后双方使用 "对称密钥" 加解密来传输 "真正的数据" 



//=============================================== 服务器的公钥签名并发送给浏览器：
//=============================================== 服务器的公钥签名并发送给浏览器：

//============== （1） "服务器的公钥签名"并发送给浏览器：
//============== （1） "服务器的公钥签名"并发送给浏览器：
	（1）服务器提供一个证书，其中包含"服务器的公钥"。
	（2）"证书颁发机构（CA）" 对 "该证书" 进行签名（对公钥哈希值加密），确保证书的真实性。
	（3）服务器将这个  "带有 CA 签名的证书" 发送给浏览器。

//============== （1） 浏览器验证证书：
//============== （1） 浏览器验证证书：
	（1）浏览器使用 "预埋的 CA 公钥" 来验证 "CA 签名"。
	（1）验证通过后，浏览器 "信任该证书" ，并提取到 "服务器的公钥"。

//============== （1） 浏览器生成 "对称密钥" 并加密传输：
//============== （1） 浏览器生成 "对称密钥" 并加密传输：
	（1）浏览器生成一个 "对称密钥"，并使用 "服务器的公钥" 将这个 "对称密钥" 加密。
	（2）将 "加密后的对称密钥" 发送给服务器。

//============== （2）服务器解密对称密钥：
//============== （2）服务器解密对称密钥：
	（1）服务器使用 "自己的私钥" 解密，得到 "浏览器生成的对称密钥"。

//============== （） 双方 "使用对称密钥" 进行通信：
//============== （） 双方 "使用对称密钥" 进行通信：
	（1）双方都拥有 "同一个对称密钥"
		 接下来的通信（即数据加解密）都使用这个 "对称密钥" 来确保 "数据的机密性和完整性"。



//=============================================== 总结
//=============================================== 总结

（1）"公钥和私钥" 的作用主要是在 "传输对称密钥" 时保证安全。
（2）"对称密钥" 用于 "加密和解密实际的通信数据"，因为对称加密速度快且适合大数据量的传输。

这个流程确保了浏览器和服务器之间的通信是安全的，数据不会被中间人窃听或篡改。